// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using NetPlugAndPlay.Models;
using System;

namespace NetPlugAndPlay.Migrations
{
    [DbContext(typeof(PnPServerContext))]
    [Migration("20171218214852_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NetPlugAndPlay.Models.DHCPExclusion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("End");

                    b.Property<Guid?>("NetworkDeviceId");

                    b.Property<string>("Start");

                    b.HasKey("Id");

                    b.HasIndex("NetworkDeviceId");

                    b.ToTable("DhcpExclusions");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("DHCPRelay");

                    b.Property<string>("DHCPTftpBootfile");

                    b.Property<string>("Description");

                    b.Property<Guid?>("DeviceTypeId");

                    b.Property<string>("DomainName");

                    b.Property<string>("Hostname");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Network");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("NetworkDevices");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkDeviceLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("ConnectedToDeviceId");

                    b.Property<int>("ConnectedToInterfaceIndex");

                    b.Property<int>("InterfaceIndex");

                    b.Property<Guid?>("NetworkDeviceId");

                    b.HasKey("Id");

                    b.HasIndex("ConnectedToDeviceId");

                    b.HasIndex("NetworkDeviceId");

                    b.ToTable("NetworkDeviceLinks");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkDeviceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Manufacturer");

                    b.Property<string>("Name");

                    b.Property<string>("ProductId");

                    b.HasKey("Id");

                    b.ToTable("NetworkDeviceTypes");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkInterface", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("DeviceTypeId");

                    b.Property<int>("InterfaceIndex");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DeviceTypeId");

                    b.ToTable("NetworkInterfaces");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.TemplateConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<Guid?>("NetworkDeviceId");

                    b.Property<Guid?>("TemplateId");

                    b.HasKey("Id");

                    b.HasIndex("NetworkDeviceId");

                    b.HasIndex("TemplateId");

                    b.ToTable("TemplateConfigurations");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.TemplateProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<Guid?>("TemplateConfigurationId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("TemplateConfigurationId");

                    b.ToTable("TemplateProperties");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.TFTPFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Content");

                    b.Property<string>("FilePath");

                    b.HasKey("Id");

                    b.ToTable("TFTPFiles");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.DHCPExclusion", b =>
                {
                    b.HasOne("NetPlugAndPlay.Models.NetworkDevice")
                        .WithMany("DHCPExclusions")
                        .HasForeignKey("NetworkDeviceId");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkDevice", b =>
                {
                    b.HasOne("NetPlugAndPlay.Models.NetworkDeviceType", "DeviceType")
                        .WithMany()
                        .HasForeignKey("DeviceTypeId");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkDeviceLink", b =>
                {
                    b.HasOne("NetPlugAndPlay.Models.NetworkDevice", "ConnectedToDevice")
                        .WithMany()
                        .HasForeignKey("ConnectedToDeviceId");

                    b.HasOne("NetPlugAndPlay.Models.NetworkDevice", "NetworkDevice")
                        .WithMany("Uplinks")
                        .HasForeignKey("NetworkDeviceId");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.NetworkInterface", b =>
                {
                    b.HasOne("NetPlugAndPlay.Models.NetworkDeviceType", "DeviceType")
                        .WithMany("Interfaces")
                        .HasForeignKey("DeviceTypeId");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.TemplateConfiguration", b =>
                {
                    b.HasOne("NetPlugAndPlay.Models.NetworkDevice", "NetworkDevice")
                        .WithMany()
                        .HasForeignKey("NetworkDeviceId");

                    b.HasOne("NetPlugAndPlay.Models.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId");
                });

            modelBuilder.Entity("NetPlugAndPlay.Models.TemplateProperty", b =>
                {
                    b.HasOne("NetPlugAndPlay.Models.TemplateConfiguration", "TemplateConfiguration")
                        .WithMany("Properties")
                        .HasForeignKey("TemplateConfigurationId");
                });
#pragma warning restore 612, 618
        }
    }
}
